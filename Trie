public class Trie {

  private class TrieNode {
    HashMap<Character, TrieNode> characters = new HashMap<Character, TrieNode>();
    private int size;
    private boolean isWord;
    
    public void addChild(char ch) {
        children.putIfAbsent(ch, new TrieNode());        
    }
    
    public TrieNode getChild(char ch) {
        return children.get(ch);
    }
    
    private void setSize(int theSize) {
        size = theSize;
    }
    
    private void incSize() {
        size++;
    }
    
    private int getSize() {
        return size;
    }
    
    private void setIsWord(boolean theWord) {
        isWord = theWord;
    }
    
    private boolean getIsWord() {
        return isWord;
    }
}
class Trie {
    TrieNode root = new TrieNode();
    
    Trie() {}
    
    Trie(String[] words) {
        for(String word : words) {
            add(word);
        }
    }
    public void add(String word) {
        TrieNode curr = root;
        for(int i = 0; i < word.length(); i++) {
            char ch = word.charAt(i);
            curr.addChild(ch);
            curr = curr.getChild(ch);
            curr.incSize();            
        }
    }
    public boolean find(String word) {
        TrieNode curr = root;
        TrieNode node;
        char ch = ' ';
        for(int i = 0; i < word.length(); i++) {
            ch = word.charAt(i);
            node = curr.getChild(ch);
            if(node == null) {
                return false;
            }
            curr = node;            
        }
            return curr.getIsWord();
    }
    
    public void delete(String word) {
        delete(root, word, 0);
    }
    
    public boolean delete(TrieNode theNode, String word, int ind) {
    char ch = ' ';
    TrieNode nextNode;
    boolean shouldDelete = false;
        if(index == word.length()) {
            if(!theNode.getIsWord()) {
                return false;
            }
            theNode.setIsWord = false;
            return true;
        }
        ch = word.charAt(ind);
        nextNode = theNode.getChild(ch);
        if(tempNode == null) {
            return false;
        }
        shouldDelete = delete(nextNode, word, ind+1);
        
        if(shouldDelete) {
            nextNode.getChild(ch).characters.remove();
            return true;
        }
        return false;
    }
  }
}
